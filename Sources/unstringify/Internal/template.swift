import Foundation

// swiftlint:disable:next function_body_length
func template(keys: [String], formattedKeys: [FormatKey], richKeys: [String], richFormattedKeys: [FormatKey]) -> String {
    let file: String =
        """
            // Generated by Unstringify.
            // DO NOT EDIT!

            import Foundation
            import Unstringified

            private final class _Unstringified {}

            extension Unstringified {
            \tpublic var localizableStringsTableName: String? {
            \t\treturn nil
            \t}

            \tpublic var localizableStringsBundle: Bundle? {
            \t\tlet _UnstringifiedBundle = Bundle(for: _Unstringified.self)
            \t\tguard _UnstringifiedBundle.bundleIdentifier != Bundle.main.bundleIdentifier else {
            \t\t\treturn Bundle.main
            \t\t}
            \t\tlet bundleURL = _UnstringifiedBundle.bundleURL
            \t\tlet bundleName = bundleURL.lastPathComponent
            \t\tlet resource = (bundleName as NSString).deletingPathExtension
            \t\tguard let path = _UnstringifiedBundle.path(forResource: resource, ofType: "bundle") else {
            \t\t\treturn nil
            \t\t}
            \t\treturn Bundle(path: path)
            \t}
            }
            
            extension String {
            \tpublic enum Text: String, Unstringified {
            \t\tpublic typealias StringType = String
            \t\tcase \(keys.joined(separator: ", "))
            \t}

            \tpublic enum Format: Unstringified {
            \t\tpublic typealias StringType = String
            \t\tcase \(formattedKeys.map { $0.description }.joined(separator: ", "))
            \t}

            \tpublic enum RichText: String, Unstringified {
            \t\tpublic typealias StringType = NSAttributedString
            \t\tcase \(richKeys.joined(separator: ", "))
            \t}

            \tpublic enum RichFormat: Unstringified {
            \t\tpublic typealias StringType = NSAttributedString
            \t\tcase \(richFormattedKeys.map { $0.description }.joined(separator: ", "))
            \t}
            }

            """.replacingOccurrences(of: "\t", with: "    ")
    return file
}
